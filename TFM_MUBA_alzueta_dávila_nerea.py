# -*- coding: utf-8 -*-
"""TFM_MUBA_Alzueta_Dávila_Nerea.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uIEGTyFDU2fin6NzCgzgZxGqTkoZSO_6
"""

!pip install seaborn
import numpy as np
import seaborn as sns
import pandas as pd

df=pd.read_csv("/content/Walmart.csv")
df.head()

"""# PREPROCESAMIENTO"""

df.isnull().sum()

df.info()

df2 = pd.get_dummies(df, columns=['promotion_applied','holiday_indicator','stockout_indicator'], dtype=int)
print(df2)

df2 = df2.drop(columns=['promotion_applied_False'])
df2 = df2.drop(columns=['holiday_indicator_False'])
df2 = df2.drop(columns=['stockout_indicator_False'])

print(df2['promotion_type'].value_counts())

df2['promotion_type'] = df2['promotion_type'].replace('BOGO', 'Buy One Get One')

df2['promotion_type'] = df2['promotion_type'].fillna('None')

print(df2['promotion_type'].value_counts())

df2['transaction_date'] = pd.to_datetime(df2['transaction_date'])

df2['month'] = df2['transaction_date'].dt.month

Q1 = df['actual_demand'].quantile(0.25)
Q3 = df['actual_demand'].quantile(0.75)
IQR = Q3 - Q1

limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

outliers = df2[(df2['actual_demand'] < limite_inferior) | (df2['actual_demand'] > limite_superior)]
print("Número de outliers:", len(outliers))

df2.head()

"""# Análisis Univariante

La variable objetivo actual_demand presenta una distribución aproximadamente uniforme, con frecuencias similares a lo largo de todo el rango observado. Esta característica sugiere una generación balanceada de datos y la ausencia de sesgos evidentes hacia valores extremos. La suavización mediante KDE confirma la falta de modas claras o colas largas, lo que permite su uso directo en modelos de predicción sin necesidad de transformaciones adicionales.
"""

import seaborn as sns
import matplotlib.pyplot as plt

ax = sns.countplot(x='customer_gender', data=df, hue='customer_gender')
plt.title('Customer Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

ax = sns.countplot(x='holiday_indicator', data=df, hue='holiday_indicator')
plt.title('Holiday Indicator Distribution')
plt.xlabel('Holiday')
plt.ylabel('Frequency')
ax.legend_.remove()  # eliminar leyenda redundante
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

ax = sns.countplot(x='stockout_indicator', data=df, hue='stockout_indicator')
plt.title('Stockout Indicator Distribution')
plt.xlabel('Stockout')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

df['customer_loyalty_level'].value_counts().plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title('Customer Loyalty Level Distribution')
plt.ylabel('')
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

ax = sns.countplot(x='payment_method', data=df, hue='payment_method')
plt.title('Payment Method Distribution')
plt.xlabel('Payment Method')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

df['unit_price'].plot(kind='hist', bins=30, edgecolor='black', alpha=0.7)
plt.title('Unit Price Distribution')
plt.xlabel('Unit Price')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
ax = sns.countplot(x='weekday', data=df, hue='weekday', order=order)
plt.title('Weekday Distribution')
plt.xlabel('Day of Week')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Contar frecuencia de cada store_location y ordenar
store_counts = df['store_location'].value_counts().sort_values()

# Elegir una paleta con suficientes colores (aquí usamos 'tab20' que tiene 20)
colors = plt.cm.tab20.colors[:len(store_counts)]

# Gráfico de barras horizontales con colores variados
store_counts.plot(kind='barh', color=colors, edgecolor='black', alpha=0.9)

plt.title('Store Location Frequency')
plt.xlabel('Frequency')
plt.ylabel('Store Location')
plt.tight_layout()
plt.show()

"""# Análisis Bivariante"""

import pandas as pd
import matplotlib.pyplot as plt

# Crear los grupos de edad
bins = [18, 30, 45, 60, 100]
labels = ['18-29', '30-44', '45-59', '60+']
df2['age_group'] = pd.cut(df2['customer_age'], bins=bins, labels=labels)

# Agrupar las ventas por grupo de edad
ventas_por_grupo = df2.groupby('age_group')['quantity_sold'].sum()

# Colores personalizados para cada grupo
colors = ['#d9544d', '#4c72b0', '#55a868', '#f0c13c', '#8172b2']

# Crear el gráfico
plt.figure(figsize=(8,5))
plt.bar(ventas_por_grupo.index, ventas_por_grupo.values, color=colors)
plt.title('Quantity sold by age group')
plt.xlabel('Age group')
plt.ylabel('Quantity sold')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Agrupar por promotion_type sumando quantity_sold
grouped_promo = df.groupby('promotion_type')['quantity_sold'].sum().sort_values()

# Paleta de colores
colors = plt.cm.Set2.colors  # Otra paleta con colores suaves y variados

# Gráfico de barras
grouped_promo.plot(kind='bar', color=colors[:len(grouped_promo)], edgecolor='black', alpha=0.85)

plt.title('Quantity Sold by Promotion Type')
plt.xlabel('Promotion Type')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

counts = df['quantity_sold'].value_counts().sort_index()
x = counts.index
y = counts.values
bar_width = 0.8
plt.bar(x, y, width=bar_width, edgecolor='black', alpha=0.7)
plt.title('Quantity Sold Distribution')
plt.xlabel('Quantity Sold')
plt.ylabel('Frequency')
plt.xticks(x)  # Marcas solo en enteros
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

grouped = df.groupby('product_name')['quantity_sold'].sum().sort_values()

colors = plt.cm.tab10.colors  # Paleta de 10 colores distintos

grouped.plot(kind='bar', color=colors[:len(grouped)], edgecolor='black', alpha=0.85)

plt.title('Total Quantity Sold by Product Type')
plt.xlabel('Product Type')
plt.ylabel('Total Quantity Sold')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""## PREDICCIÓN"""

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 6))
sns.histplot(data=df2, x="actual_demand", bins=20, kde=True, color='skyblue', edgecolor='black', alpha=0.7)

# Personalizar el gráfico
plt.title("Distribución de la demanda")
plt.xlabel("actual_demand")
plt.ylabel("Count")
plt.grid(True, linestyle='--', alpha=0.5)

# Mostrar
plt.tight_layout()
plt.show()
